// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wso2/discovery/config/enforcer/config.proto

package org.wso2.choreo.connect.discovery.config.enforcer;

public final class ConfigProto {
  private ConfigProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_wso2_discovery_config_enforcer_Config_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_wso2_discovery_config_enforcer_Config_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n+wso2/discovery/config/enforcer/config." +
      "proto\022\036wso2.discovery.config.enforcer\032)w" +
      "so2/discovery/config/enforcer/cert.proto" +
      "\0323wso2/discovery/config/enforcer/am_cred" +
      "entials.proto\032,wso2/discovery/config/enf" +
      "orcer/service.proto\0322wso2/discovery/conf" +
      "ig/enforcer/jwt_generator.proto\032/wso2/di" +
      "scovery/config/enforcer/jwt_issuer.proto" +
      "\032/wso2/discovery/config/enforcer/throttl" +
      "ing.proto\032*wso2/discovery/config/enforce" +
      "r/cache.proto\032.wso2/discovery/config/enf" +
      "orcer/analytics.proto\0320wso2/discovery/co" +
      "nfig/enforcer/auth_header.proto\032+wso2/di" +
      "scovery/config/enforcer/issuer.proto\"\276\005\n" +
      "\006Config\022<\n\014tokenService\030\001 \003(\0132&.wso2.dis" +
      "covery.config.enforcer.Issuer\022;\n\010keystor" +
      "e\030\002 \001(\0132).wso2.discovery.config.enforcer" +
      ".CertStore\022=\n\ntruststore\030\003 \001(\0132).wso2.di" +
      "scovery.config.enforcer.CertStore\022<\n\013aut" +
      "hService\030\005 \001(\0132\'.wso2.discovery.config.e" +
      "nforcer.Service\022F\n\017apimCredentials\030\006 \001(\013" +
      "2-.wso2.discovery.config.enforcer.AmCred" +
      "entials\022B\n\014jwtGenerator\030\007 \001(\0132,.wso2.dis" +
      "covery.config.enforcer.JWTGenerator\022>\n\nt" +
      "hrottling\030\010 \001(\0132*.wso2.discovery.config." +
      "enforcer.Throttling\0224\n\005cache\030\t \001(\0132%.wso" +
      "2.discovery.config.enforcer.Cache\022<\n\tjwt" +
      "Issuer\030\n \001(\0132).wso2.discovery.config.enf" +
      "orcer.JWTIssuer\022<\n\tanalytics\030\013 \001(\0132).wso" +
      "2.discovery.config.enforcer.Analytics\022>\n" +
      "\nauthHeader\030\014 \001(\0132*.wso2.discovery.confi" +
      "g.enforcer.AuthHeaderB\222\001\n1org.wso2.chore" +
      "o.connect.discovery.config.enforcerB\013Con" +
      "figProtoP\001ZNgithub.com/envoyproxy/go-con" +
      "trol-plane/wso2/discovery/config/enforce" +
      "r;enforcerb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.wso2.choreo.connect.discovery.config.enforcer.CertStoreProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.AmCredentialsProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.ServiceProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.JWTGeneratorProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.JWTIssuerProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.ThrottlingProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.CacheProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.AnalyticsProto.getDescriptor(),
          org.wso2.gateway.discovery.config.enforcer.AuthHeaderProto.getDescriptor(),
          org.wso2.choreo.connect.discovery.config.enforcer.IssuerProto.getDescriptor(),
        });
    internal_static_wso2_discovery_config_enforcer_Config_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_wso2_discovery_config_enforcer_Config_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_wso2_discovery_config_enforcer_Config_descriptor,
        new java.lang.String[] { "TokenService", "Keystore", "Truststore", "AuthService", "ApimCredentials", "JwtGenerator", "Throttling", "Cache", "JwtIssuer", "Analytics", "AuthHeader", });
    org.wso2.choreo.connect.discovery.config.enforcer.CertStoreProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.AmCredentialsProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.ServiceProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.JWTGeneratorProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.JWTIssuerProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.ThrottlingProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.CacheProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.AnalyticsProto.getDescriptor();
    org.wso2.gateway.discovery.config.enforcer.AuthHeaderProto.getDescriptor();
    org.wso2.choreo.connect.discovery.config.enforcer.IssuerProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
