name: PR Check - Integration Tests

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Setup Go environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.15.x'
      - name: Cache M2 Repo
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        id: extract-project-version
      - name: Print Maven project version
        run: echo ${{ steps.extract-project-version.outputs.version }}
      - name: Build with Maven
        run: |
          #export PATH="${HOME}/go/bin:${PATH}"
          mvn clean install -PRelease -s .maven/settings.xml \
            -pl '!:integration' -pl '!:mock-backend-server' -pl '!:test-integration'
      - name: Run integration tests
        run: |
          mvn clean install -PRelease -pl ':integration' -amd -s .maven/settings.xml
      - name: Build multi platform Ubuntu images
        run: |
          ./build-ubuntu-multi-platform-images.sh all
          docker images
      - name: Setup Trivy
        # Using custom Trivy instead of "aquasecurity/trivy-action@0.1.0" to customize the behaviour
        # Run Trivy scan for all images and fail if one failed
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.21.0/trivy_0.21.0_Linux-64bit.tar.gz
          tar -xzf trivy_0.21.0_Linux-64bit.tar.gz
          echo "$(pwd)" >> $GITHUB_PATH
      - name: Trivy Scan
        run: |
          TAG=${{ steps.extract-project-version.outputs.version }}
          SEVERITY="CRITICAL,HIGH,MEDIUM"
          EXIT_CODE=0
          ARGS="--ignore-unfixed" # if the issues is fixed in a later version we can update it

          GREEN='\033[0;32m' # Green colour
          BOLD="\033[1m"
          NC='\033[0m' # No colour

          printf "${GREEN}${BOLD}Default Alpine Images${NC}\n"
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-adapter:$TAG || EXIT_CODE=$?
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-enforcer:$TAG || EXIT_CODE=$?
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-router:$TAG || EXIT_CODE=$?

          printf "${GREEN}${BOLD}Ubuntu AMD Images${NC}\n"
          SUFFIX="-ubuntu-linux_amd64"
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-adapter:${TAG}${SUFFIX} || EXIT_CODE=$?
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-enforcer:$TAG${SUFFIX} || EXIT_CODE=$?
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-router:$TAG${SUFFIX} || EXIT_CODE=$?

          printf "${GREEN}${BOLD}Ubuntu ARM Images${NC}\n"
          SUFFIX="-ubuntu-linux_arm64"
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-adapter:${TAG}${SUFFIX} || EXIT_CODE=$?
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-enforcer:$TAG${SUFFIX} || EXIT_CODE=$?
          trivy --exit-code 1 --severity "${SEVERITY}" $ARGS wso2/choreo-connect-router:$TAG${SUFFIX} || EXIT_CODE=$?

          # error if one of trivy scan failed
          exit $EXIT_CODE
