import wso2/gateway;

public function main() {
    int totalResourceLength = 0;
    {{#each this}}
    boolean isRequestValidationEnabled  = gateway:getConfigBooleanValue(gateway:VALIDATION_CONFIG_INSTANCE_ID,
    gateway:REQUEST_VALIDATION_ENABLED, gateway:DEFAULT_REQUEST_VALIDATION_ENABLED);
    boolean isResponseValidationEnabled  = gateway:getConfigBooleanValue(gateway:VALIDATION_CONFIG_INSTANCE_ID,
    gateway:RESPONSE_VALIDATION_ENABLED, gateway:DEFAULT_RESPONSE_VALIDATION_ENABLED);

    if (isRequestValidationEnabled || isResponseValidationEnabled) {
    map<string>|error  openAPIs =  gateway:extractJAR("{{projectName}}", "{{cut qualifiedServiceName " "}}");
    if (openAPIs is map<string>) {
        gateway:setOpenAPIs(openAPIs);

    }

    }
    string[] {{cut qualifiedServiceName " "}}_service = [{{#paths}}{{#value}}{{#operations}}{{#value}} "{{operationId}}"{{#unless @last}},{{/unless}}
                                {{/value}}{{/operations}}{{/value}}{{#unless @last}},{{/unless}}{{/paths}}];
    totalResourceLength = totalResourceLength +  {{cut qualifiedServiceName " "}}_service.length();
    gateway:populateAnnotationMaps("{{cut qualifiedServiceName " "}}", {{cut qualifiedServiceName " "}}, {{cut qualifiedServiceName " "}}_service);
    {{/each}}
    gateway:initiateInterceptorArray(totalResourceLength);
    {{#each this}}
    initInterceptorIndexes{{cut qualifiedServiceName " "}}();
    {{/each}}
    addTokenServicesFilterAnnotation();
    initThrottlePolicies();
    gateway:initThrottleDataPublisher();
    gateway:startObservabilityListener();

    {{>jwtRevocation}}
    startupExtension();
}
