{{#if methodNotFoundOperation}}
{{else if methodNotAllowedOperation}}
{{else}}
import ballerina/time;
import ballerina/runtime;
{{/if}}
import ballerina/http;
{{#service.importModules}}import {{.}};{{/service.importModules}}
import wso2/gateway;

function {{cut service.qualifiedServiceName " "}}_{{operationId}}_resourceFunction(http:Caller outboundEp, http:Request req{{>pathParameters}}) {
{{#if methodNotFoundOperation}}
    http:Response serverResponse = new;
    serverResponse.statusCode = 404;
    serverResponse.setJsonPayload(METHOD_NOT_FOUND_RESPONSE);
    var result = outboundEp->respond(serverResponse);
    if (result is error) {
        gateway:printError({{cut service.qualifiedServiceName " "}}Key, "Error when sending response", result);
    }
{{else if methodNotAllowedOperation}}
    http:Response serverResponse = new;
    serverResponse.statusCode = 405;
    serverResponse.setHeader("Allow", "{{path.strAllowedOperations}}");
    serverResponse.setJsonPayload(METHOD_NOT_ALLOWED_RESPONSE);
    var result = outboundEp->respond(serverResponse);
    if (result is error) {
        gateway:printError({{cut service.qualifiedServiceName " "}}Key, "Error when sending response", result);
    }
{{else}}
    handleExpectHeaderFor{{cut service.qualifiedServiceName " "}}(outboundEp, req);
    runtime:InvocationContext invocationContext = runtime:getInvocationContext();

    map<string> pathParams = { {{#pathParameters}}
        "{{name}}": <@untainted>'{{name}}{{#unless @last}},{{/unless}} {{/pathParameters}}
    };
    invocationContext.attributes["pathParams"] = pathParams;

    {{~#if service.requestInterceptor}}
    {{#equals service.requestInterceptor requestInterceptor}}
    {{else}}
    if({{operationId}}_api_request_interceptor_index == -1) {
    {{^service.isJavaRequestInterceptor}}
        {{service.requestInterceptor}}(outboundEp, req);
        if (invocationContext.attributes.hasKey(gateway:RESPOND_DONE) && <boolean>invocationContext.attributes[gateway:RESPOND_DONE]) {
            return;
        }
    {{/service.isJavaRequestInterceptor}}
    } else {
        if (!gateway:invokeRequestInterceptor({{operationId}}_api_request_interceptor_index, outboundEp, req)) {
            if (respondFromJavaInterceptor{{cut service.qualifiedServiceName " "}}(invocationContext, <@untainted>outboundEp)) {
                // return only if  interceptor returned false and respond is called from interceptor.
                return;
            }
        }
    }{{/equals}}{{/if}}
    {{#if requestInterceptor}}
    if({{operationId}}_request_interceptor_index == -1) {
    {{^isJavaRequestInterceptor}}
        {{requestInterceptor}}(outboundEp, req);
        if (invocationContext.attributes.hasKey(gateway:RESPOND_DONE) && <boolean>invocationContext.attributes[gateway:RESPOND_DONE]) {
            return;
        }
    {{/isJavaRequestInterceptor}}
    } else {
        if(!gateway:invokeRequestInterceptor({{operationId}}_request_interceptor_index, outboundEp, req)) {
            if (respondFromJavaInterceptor{{cut service.qualifiedServiceName " "}}(invocationContext, <@untainted>outboundEp)) {
                // return only if interceptor returned false and respond is called from interceptor.
                return;
            }
        }
    }
    {{/if}}

    {{#if service.isGrpc}}
    string urlPostfix = <@untainted>req.rawPath;
    {{else}}
    string urlPostfix = gateway:replaceFirst(req.rawPath,"{{service.basepath}}","");
    {{/if}}
    if(urlPostfix != "" && !gateway:hasPrefix(urlPostfix, "/")) {
        urlPostfix = "/" + urlPostfix;
    }
    http:Response|error clientResponse;
    http:Response r = new;
    clientResponse = r;
    string destination_attribute;
    invocationContext.attributes["timeStampRequestOut"] = time:currentTime().time;
    boolean reinitRequired = false;
    string failedEtcdKey = "";
    string failedEtcdKeyConfigValue = "";
    boolean|error hasUrlChanged;
    http:ClientConfiguration newConfig;
    boolean reinitFailed = false;
    boolean isProdEtcdEnabled = false;
    boolean isSandEtcdEnabled = false;
    map<string> endpointEtcdConfigValues = {};
    {{#service.endpointConfig.prodEndpoints}}
        {{#service.endpointConfig.sandEndpoints}}
            if("PRODUCTION" == <string>invocationContext.attributes["KEY_TYPE"]) {
            {{#if hasProdEpConfig}}
                {{>useResourceProdEp}}
            {{else}}
                {{>useAPIProdEp}}
            {{/if}}
            } else {
            {{#if hasSandEpConfig}}
                {{>useResourceSandEp}}
            {{else}}
                {{>useApiSandEp}}
            {{/if}}
            }
        {{/service.endpointConfig.sandEndpoints}}
        {{^service.endpointConfig.sandEndpoints}}
            if("PRODUCTION" == <string>invocationContext.attributes["KEY_TYPE"]) {
            {{#if hasProdEpConfig}}
                {{>useResourceProdEp}}
            {{else}}
                {{>useAPIProdEp}}
            {{/if}}
            } else {
            {{#if hasSandEpConfig}}
                {{>useResourceSandEp}}
            {{else}}
                {{>noSandAvailableError}}
            {{/if}}
            }
        {{/service.endpointConfig.sandEndpoints}}
    {{/service.endpointConfig.prodEndpoints}}
    {{^service.endpointConfig.prodEndpoints}}
        {{#service.endpointConfig.sandEndpoints}}
            if("SANDBOX" == <string>invocationContext.attributes["KEY_TYPE"]) {
            {{#if hasSandEpConfig}}
                {{>useResourceSandEp}}
            {{else}}
                {{>useApiSandEp}}
            {{/if}}
            } else {
            {{#if hasProdEpConfig}}
                {{>useResourceProdEp}}
            {{else}}
                {{>noProdAvailableError}}
            {{/if}}
            }
        {{/service.endpointConfig.sandEndpoints}}
        {{^service.endpointConfig.sandEndpoints}}
            {{#if hasSandEpConfig}}
            if("SANDBOX" == <string>invocationContext.attributes["KEY_TYPE"]) {
                {{>useResourceSandEp}}
            } else {
            {{#if hasProdEpConfig}}
            {{else}}
                {{>noProdAvailableError}}
            }
            {{/if}}
            {{else}}
                {{#if hasProdEpConfig}}
                if("PRODUCTION" == <string>invocationContext.attributes["KEY_TYPE"]) {
                {{/if}}
            {{/if}}
            {{#if hasProdEpConfig}}
                {{>useResourceProdEp}}
                {{#if hasSandEpConfig}}
                {{else}}
                } else {
                    {{>noSandAvailableError}}
                {{/if}}
                }
            {{/if}}
        {{/service.endpointConfig.sandEndpoints}}
    {{/service.endpointConfig.prodEndpoints}}
    invocationContext.attributes["timeStampResponseIn"] = time:currentTime().time;

    if(clientResponse is http:Response) {
        {{#if responseInterceptor}}
        if({{operationId}}_response_interceptor_index == -1) {
        {{^isJavaResponseInterceptor}}
            {{responseInterceptor}} (outboundEp, clientResponse);
            if (invocationContext.attributes.hasKey(gateway:RESPOND_DONE) && <boolean>invocationContext.attributes[gateway:RESPOND_DONE]) {
                return;
            }
        {{/isJavaResponseInterceptor}}
        } else {
            if (!gateway:invokeResponseInterceptor({{operationId}}_response_interceptor_index, outboundEp, clientResponse)) {
                if (respondFromJavaInterceptor{{cut service.qualifiedServiceName " "}}(invocationContext, <@untainted>outboundEp)) {
                    // return only if interceptor returned false and respond is called from interceptor.
                    return;
                }
            }
        }{{/if}}
        {{~#if service.responseInterceptor}}
        {{#equals service.responseInterceptor responseInterceptor}}
        {{else}}
        if ({{operationId}}_api_response_interceptor_index == -1) {
        {{^service.isJavaResponseInterceptor}}
            {{service.responseInterceptor}} (outboundEp, clientResponse);
            if (invocationContext.attributes.hasKey(gateway:RESPOND_DONE) && <boolean>invocationContext.attributes[gateway:RESPOND_DONE]) {
                return;
            }
        {{/service.isJavaResponseInterceptor}}
        } else {
            if (!gateway:invokeResponseInterceptor({{operationId}}_api_response_interceptor_index, outboundEp, clientResponse)) {
                if (respondFromJavaInterceptor{{cut service.qualifiedServiceName " "}}(invocationContext, <@untainted>outboundEp)) {
                    // return only if interceptor returned false and respond is called from interceptor.
                    return;
                }
            }
        }{{/equals}}{{/if}}

        invocationContext.attributes[gateway:DID_EP_RESPOND] = true;
        var outboundResult = outboundEp->respond(clientResponse);
        if (outboundResult is error) {
            gateway:printError({{cut service.qualifiedServiceName " "}}Key, "Error when sending response", outboundResult);
        }
    } else {
        http:Response res = new;
        res.statusCode = 500;
        string errorMessage = clientResponse.reason();
        int errorCode = 101503;
        string errorDescription = "Error connecting to the back end";

        if(gateway:contains(errorMessage, "connection timed out") || gateway:contains(errorMessage,"Idle timeout triggered")) {
            errorCode = 101504;
            errorDescription = "Connection timed out";
        }
        if(gateway:contains(errorMessage, "Malformed URL")) {
            errorCode = 101505;
            errorDescription = "Malformed URL";
        }
        invocationContext.attributes["error_response_code"] = errorCode;
        invocationContext.attributes["error_response"] = errorDescription;
        if (! invocationContext.attributes.hasKey(gateway:IS_GRPC)) {
            json payload = {fault : {
                                code : errorCode,
                                message : "Runtime Error",
                                description : errorDescription
                            }};

            res.setPayload(payload);
        } else {
            gateway:attachGrpcErrorHeaders (res, errorDescription);
        }
        gateway:printError({{cut service.qualifiedServiceName " "}}Key, "Error in client response", clientResponse);
        var outboundResult = outboundEp->respond(res);
        if (outboundResult is error) {
            gateway:printError({{cut service.qualifiedServiceName " "}}Key, "Error when sending response", outboundResult);
        }
    }
{{/if}}
}

{{#if service.requestInterceptor}}
function {{operationId}}_api_request_interceptor_{{cut service.qualifiedServiceName " "}}() {
    string {{operationId}}_api_request_interceptor_name = "{{service.requestInterceptor}}";
    if({{operationId}}_api_request_interceptor_name.startsWith("java:")) {
        {{operationId}}_api_request_interceptor_index = gateway:loadInterceptorClass({{operationId}}_api_request_interceptor_name.substring(5, {{operationId}}_api_request_interceptor_name.length()));
    }
}
{{/if}}
{{#if service.responseInterceptor}}
function {{operationId}}_api_response_interceptor_{{cut service.qualifiedServiceName " "}}() {
    string {{operationId}}_api_response_interceptor_name = "{{service.responseInterceptor}}";
    if({{operationId}}_api_response_interceptor_name.startsWith("java:")) {
        {{operationId}}_api_response_interceptor_index = gateway:loadInterceptorClass({{operationId}}_api_response_interceptor_name.substring(5, {{operationId}}_api_response_interceptor_name.length()));
    }
}
{{/if}}
{{#if requestInterceptor}}
function {{operationId}}_request_interceptor_{{cut service.qualifiedServiceName " "}}() {
    string {{operationId}}_request_interceptor_name = "{{requestInterceptor}}";
    if({{operationId}}_request_interceptor_name.startsWith("java:")) {
        {{operationId}}_request_interceptor_index = gateway:loadInterceptorClass({{operationId}}_request_interceptor_name.substring(5, {{operationId}}_request_interceptor_name.length()));
    }
}
{{/if}}
{{#if responseInterceptor}}
function {{operationId}}_response_interceptor_{{cut service.qualifiedServiceName " "}}() {
    string {{operationId}}_response_interceptor_name = "{{responseInterceptor}}";
    if({{operationId}}_response_interceptor_name.startsWith("java:")) {
        {{operationId}}_response_interceptor_index = gateway:loadInterceptorClass({{operationId}}_response_interceptor_name.substring(5, {{operationId}}_response_interceptor_name.length()));
    }
}
{{/if}}