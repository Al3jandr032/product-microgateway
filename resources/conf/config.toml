[adapter]
# The configuration file for mgw
[adapter.server]
host = "0.0.0.0"
port = "9843"

[[adapter.server.users]]
username = "admin"
password = "admin"

[adapter.keystore]
certPath = "/home/wso2/security/keystore/mg.pem"
keyPath = "/home/wso2/security/keystore/mg.key"

[adapter.truststore]
location = "/home/wso2/security/truststore"

[adapter.consul]
# todo rumesh check whether we need to have certPath and KeyPath
enable = false
url = "https://169.254.1.1:8501" # scheme + host ip + port
pollInterval = 5 # seconds
aclTokenFilePath = ""
# certs for tls
caCertPath = "/home/wso2/security/truststore/consul/consul-agent-ca.pem"
certPath = "/home/wso2/security/truststore/consul/local-dc-client-consul-0.pem"
keyPath = "/home/wso2/security/truststore/consul/local-dc-client-consul-0-key.pem"

[envoy]
listenerHost = "0.0.0.0"
listenerPort = 9095
clusterTimeoutInSeconds = 20
listenerTLSEnabled = true

[envoy.keystore]
certPath = "/home/wso2/security/keystore/mg.pem"
keyPath = "/home/wso2/security/keystore/mg.key"

[envoy.upstream]
[envoy.upstream.tls]
minimumProtocolVersion = "TLS1_1"
maximumProtocolVersion = "TLS1_2"
ciphers = "ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES128-SHA, ECDHE-RSA-AES128-SHA, AES128-GCM-SHA256, AES128-SHA, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES256-SHA, AES256-GCM-SHA384, AES256-SHA"  
# the default endpoint certificates
trustedCertPath = "/etc/ssl/certs/ca-certificates.crt"
verifyHostName = true
disableSslVerification = false

[enforcer]
[enforcer.authService]
  port = 8081
  maxMessageSize = 1000000000
  maxHeaderLimit = 8192
  #keep alive time of the external authz connection
  keepAliveTime = 600
  [enforcer.authService.threadPool]
    coreSize = 400
    maxSize = 500
    #keep alive time of threads in seconds
    keepAliveTime = 600
    queueSize = 1000

# JWT token authorization configurations. You can provide multiple JWT issuers
# Issuer 1
[[enforcer.jwtTokenConfig]]
    name="Resident Key Manager"
    issuer = "https://localhost:9443/oauth2/token"
    certificateAlias = "wso2carbon"
    # URL of the JWKs endpoint
    jwksURL = ""
    # Validate subscribed APIs
    validateSubscription = false
    # The claim in which the consumer key of the application is coming
    consumerKeyClaim = "azp"
    # Certificate Filepath within enforcer
    certificateFilePath = "/home/wso2/security/truststore/wso2carbon.pem"

[enforcer.apimCredentials]
    username="admin"
    password="admin"

# Throttling configurations related to event publishing using a binary connection
[enforcer.throttlingConfig.binary]
 enabled = false
 # Credentials required to establish connection between Traffic Manager
 username = "admin"
 password = "admin"
 # Receiver URL and the authentication URL of the Traffic manager node/nodes
 [[enforcer.throttlingConfig.binary.urlGroup]]
   receiverURLs = ["tcp://localhost:9611"]
   authURLs = ["ssl://localhost:9711"]
   type = "loadbalance"
 # Data publisher object pool configurations
 [enforcer.throttlingConfig.binary.publisher]
   maxIdleDataPublishingAgents = 1000
   initIdleObjectDataPublishingAgents = 200
 # Data publisher thread pool configurations
   publisherThreadPoolCoreSize = 200
   publisherThreadPoolMaximumSize = 1000
   publisherThreadPoolKeepAliveTime = 200
 [enforcer.throttlingConfig.binary.agent]
   # SSL Protocols
   sslEnabledProtocols = "TLSv1,TLSv1.1,TLSv1.2"
   # ciphers
   ciphers="TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256  ,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256  ,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
   # The size of the queue event disruptor which handles events before they are published.
   # The value specified should always be the result of an exponent with 2 as the base.
   queueSize = 32768
   # The maximum number of events in a batch sent to the queue event disruptor at a given time
   batchSize = 200
   # The number of threads that will be reserved to handle events at the time you start
   corePoolSize = 1
   # Socket timeout
   socketTimeoutMS = 30000
   # The maximum number of threads that should be reserved at any given time to handle events
   maxPoolSize = 1
   # The amount of time which threads in excess of the core pool size may remain idle before being terminated.
   keepAliveTimeInPool = 20
   # The time interval between reconnection
   reconnectionInterval = 30
   # TCP connection pool configurations (for data publishing)
   maxTransportPoolSize = 250
   maxIdleConnections = 250
   evictionTimePeriod = 5500
   minIdleTimeInPool = 5000
   # SSL connection pool configurations (for authentication)
   secureMaxTransportPoolSize = 250
   secureMaxIdleConnections = 250
   secureEvictionTimePeriod = 5500
   secureMinIdleTimeInPool = 5000

[controlPlane]
# Control plane's eventHub details
[controlPlane.eventHub]
enabled = false
serviceUrl = "https://localhost:9443/"
username="admin"
password="admin"
environmentLabels = ["Production and Sandbox"]
retryInterval = 5
skipSSLVerification=true
# Message broker connection URL of the control plane
[controlPlane.eventHub.jmsConnectionParameters]
eventListeningEndpoints = "amqp://admin:admin@localhost:5672/"
